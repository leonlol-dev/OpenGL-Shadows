#version 430 core
// This is the Depth fragment shader
// The program in this file will be run separately for each fragment (pixel) that is drawn

// These are the per-fragment inputs
// They must match with the outputs of the vertex shader
in vec3 eyeSpaceNormalV;
in vec3 eyeSpaceLightPosV; //LightPos
in vec3 eyeSpaceVertPosV;	//FragPos
in vec4 fragPostLightSpace;
in vec2 texCoord;

// These variables will be the same for every vertex in the model
// They are mostly material and light properties
// We provide default values in case the program doesn't set them
uniform vec3 lightColour = {1,1,1};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {0.1f,0.1f,0.2f};
uniform vec3 diffuseColour  = {0.8f,0.1f,0.1f};
uniform vec3 specularColour = {0.0f,1.0f,0.0f};
uniform float shininess     = 20.0f;
uniform float alpha         = 1.0f;
uniform sampler2D depthMap;
uniform samplerCube cubeMap;
uniform float near_plane;
uniform float far_plane;
uniform mat4 lightSpaceMatrix;
uniform vec3 lightPos;


in vec4 lightSpaceVertPos;
in vec4 FragPos;

// This is the output, it is the fragment's (pixel's) colour
out vec4 fragColour;


// The actual program, which will run on the graphics card
void main()
{
	float lightDistance = length(FragPos.xyz - lightPos);
	lightDistance = lightDistance / far_plane;
	gl_FragDepth = lightDistance;

	vec3 fragToLight = FragPos.xyz - lightPos;
    float closestDepth = texture(cubeMap, fragToLight).r;

	//fragColour = vec4(closestDepth);
	fragColour = vec4(vec3(closestDepth / far_plane), 1.0);
}

