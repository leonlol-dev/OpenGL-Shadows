#version 430 core
// This is the Depth vertex shader
// The program in this file will be run separately for each vertex in the model

// This is the per-vertex input
layout(location = 0) in vec4 vPosition;
layout(location = 1) in vec3 vNormalIn;

// These variables will be the same for every vertex in the model
uniform mat4 modelMat;
uniform mat4 viewMat;
uniform mat4 projMat;
uniform mat4 lightSpaceMatrix;

uniform vec4 worldSpaceLightPos = {1,0.0,1,1};

// These are the outputs from the vertex shader
// The data will (eventually) end up in the fragment shader
out vec3 eyeSpaceNormalV;
out vec3 eyeSpaceLightPosV; //LightPos
out vec3 eyeSpaceVertPosV; //FragPos
out vec4 fragPostLightSpace;
out vec4 lightSpaceVertPos;
out vec2 texCoord;
out vec4 FragPos;

// The actual program, which will run on the graphics card
void main()

{
    //Light Space Vert Position
	lightSpaceVertPos = vec4(lightSpaceMatrix * modelMat * vPosition);

    //Texture Coordinates
	texCoord = vPosition.xy;

	// Viewing transformation
    // Incoming vertex position is multiplied by: modelling matrix, then viewing matrix, then projection matrix
    // gl_position is a special output variable
    gl_Position = modelMat * vPosition;

    //Frag Position
    FragPos = vec4(modelMat * vPosition);

}


