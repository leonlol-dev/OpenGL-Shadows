#version 430 core
// This is the fragment shader
// The program in this file will be run separately for each fragment (pixel) that is drawn

// These are the per-fragment inputs
// They must match with the outputs of the vertex shader
in vec3 eyeSpaceNormalV;
in vec3 eyeSpaceLightPosV; //LightPos
in vec3 eyeSpaceVertPosV;	//FragPos
in vec4 fragPostLightSpace;
in vec4 lightSpaceVertPos;
in vec2 texCoord;
in vec3 fragPos;

// These variables will be the same for every vertex in the model
// They are mostly material and light properties
// We provide default values in case the program doesn't set them
uniform vec3 lightColour = {1,1,1};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {0.1f,0.1f,0.2f};
uniform vec3 diffuseColour  = {0.8f,0.1f,0.1f};
uniform vec3 specularColour = {0.0f,1.0f,0.0f};
uniform float shininess     = 20.0f;
uniform float alpha         = 1.0f;
uniform sampler2D depthMap;
uniform float near_plane;
uniform float far_plane;
uniform mat4 lightSpaceMatrix;
uniform vec3 lightPos;

// This is the output, it is the fragment's (pixel's) colour
out vec4 fragColour;

float ShadowCalculation(vec4 fragPostLightSpace, vec3 normal, vec3 lightDir)
{
	//Perform perspective divide.
	vec3 projCoords = fragPostLightSpace.xyz / fragPostLightSpace.w;

	//Transform to [0,1] range
	projCoords = projCoords * 0.5 + 0.5;

	//Get closest depth from light's perspective(using [0,1] range fragpostlight as coords)
	float closestDepth = texture(depthMap, projCoords.xy).r;
	
	//Get depth of current fragment from light's perspective
	float currentDepth = projCoords.z;

	//Calculate bias
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);

	//Check whether current frag pos is in shadow
	float shadow = 0.0f;
	vec2 texelSize = 1.0 / textureSize(depthMap, 0);

	//PCF Algorithm
	for(int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			float pcfDepth = texture(depthMap, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
		
	}

	shadow /= 9.0;
	return shadow;
}

// The actual program, which will run on the graphics card
void main()
{
		// This is the direction from the fragment to the light, in eye-space
        vec3 lightDir = normalize( lightPos - fragPos );
        // Re-normalise the normal just in case
        vec3 normal = normalize( eyeSpaceNormalV );
		
		//Phong's light shader
        vec3 viewDir = normalize(eyeSpaceNormalV - eyeSpaceVertPosV);
        vec3 halfwayDir = normalize(lightDir + viewDir);

        vec3 diffuse = vec3(0,0,0);
	
        // This is where you need to write your code!
        float spec = pow(max(dot(normal, halfwayDir), 0.0), shininess);
        vec3 specular = lightColour * spec;
        
		// Calculate shadows
		float shadow = ShadowCalculation(fragPostLightSpace, normal, lightDir);

		//Final Lighting variable
		vec3 lighting = (ambientColour + (1.0 - shadow) * (diffuse + specular)) * lightColour;

        // The final output colour is the emissive + ambient + diffuse + specular (old)
        //fragColour = vec4( emissiveColour + ambientColour + diffuse + specular, alpha) ;

		fragColour = vec4(lighting, 1.0f);
	

}
